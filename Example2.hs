import Clash.Prelude



reg' :: Unsigned 1 -> Unsigned 1 -> (Unsigned 1, Unsigned 1)
reg' state input = (state', state)
    where state' = input

reg'B = mealy reg' 0

clone :: () -> Unsigned 1 -> ((), (Unsigned 1, Unsigned 1))
clone () input = ((), (input, input))

cloneB = mealy clone ()

add' :: () -> (Unsigned 1, Unsigned 1) -> ((), (Unsigned 2))
add' () (s1, s2) = ((), ((fromIntegral s2) + (fromIntegral s1)))

addB = mealy add' ()

-- generated by Click Clash:


system cloneIn0 = addOut0
    where
        reg'Out0 = reg'B cloneOut1
        (cloneOut0, cloneOut1) = unbundle $ cloneB cloneIn0
        addOut0 = addB $ bundle (cloneOut0, reg'Out0)